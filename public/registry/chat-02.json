{
  "name": "chat-02",
  "type": "registry:block",
  "description": "A chat in a sidebar.",
  "dependencies": [
    "ai",
    "@ai-sdk/openai"
  ],
  "registryDependencies": [
    "sidebar",
    "breadcrumb",
    "https://simple-ai.alwurts.com/registry/chat-input.json",
    "https://simple-ai.alwurts.com/registry/chat-message-area.json",
    "https://simple-ai.alwurts.com/registry/chat-message.json"
  ],
  "files": [
    {
      "path": "blocks/chat-02/page.tsx",
      "content": "import {\n\tBreadcrumb,\n\tBreadcrumbItem,\n\tBreadcrumbLink,\n\tBreadcrumbList,\n\tBreadcrumbPage,\n\tBreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\nimport {\n\tSidebarInset,\n\tSidebarProvider,\n\tSidebarTrigger,\n} from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\n\nexport default function Page() {\n\treturn (\n\t\t<SidebarProvider\n\t\t\tstyle={{\n\t\t\t\t// @ts-ignore\n\t\t\t\t\"--sidebar-width\": \"25rem\",\n\t\t\t\t\"--sidebar-width-mobile\": \"25rem\",\n\t\t\t}}\n\t\t>\n\t\t\t<SidebarInset>\n\t\t\t\t<header className=\"flex h-16 shrink-0 items-center gap-2 border-b px-4\">\n\t\t\t\t\t<Breadcrumb>\n\t\t\t\t\t\t<BreadcrumbList>\n\t\t\t\t\t\t\t<BreadcrumbItem className=\"hidden md:block\">\n\t\t\t\t\t\t\t\t<BreadcrumbLink href=\"#\">\n\t\t\t\t\t\t\t\t\tBuilding Your Application\n\t\t\t\t\t\t\t\t</BreadcrumbLink>\n\t\t\t\t\t\t\t</BreadcrumbItem>\n\t\t\t\t\t\t\t<BreadcrumbSeparator className=\"hidden md:block\" />\n\t\t\t\t\t\t\t<BreadcrumbItem>\n\t\t\t\t\t\t\t\t<BreadcrumbPage>Data Fetching</BreadcrumbPage>\n\t\t\t\t\t\t\t</BreadcrumbItem>\n\t\t\t\t\t\t</BreadcrumbList>\n\t\t\t\t\t</Breadcrumb>\n\t\t\t\t\t<SidebarTrigger className=\"-mr-1 ml-auto rotate-180\" />\n\t\t\t\t</header>\n\t\t\t\t<div className=\"flex flex-1 flex-col gap-4 p-4\">\n\t\t\t\t\t<div className=\"grid auto-rows-min gap-4 md:grid-cols-3\">\n\t\t\t\t\t\t<div className=\"aspect-video rounded-xl bg-muted/50\" />\n\t\t\t\t\t\t<div className=\"aspect-video rounded-xl bg-muted/50\" />\n\t\t\t\t\t\t<div className=\"aspect-video rounded-xl bg-muted/50\" />\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"min-h-[100vh] flex-1 rounded-xl bg-muted/50 md:min-h-min\" />\n\t\t\t\t</div>\n\t\t\t</SidebarInset>\n\t\t\t<AppSidebar side=\"right\" />\n\t\t</SidebarProvider>\n\t);\n}\n",
      "type": "registry:page",
      "target": "app/chat/page.tsx"
    },
    {
      "path": "blocks/chat-02/route.ts",
      "content": "import { openai } from \"@ai-sdk/openai\";\nimport { streamText } from \"ai\";\n\nexport async function POST(req: Request) {\n\tconst { messages } = await req.json();\n\n\tconst result = streamText({\n\t\tmodel: openai(\"gpt-4o-mini\"),\n\t\tsystem: \"You are a helpful assistant\",\n\t\tmessages,\n\t});\n\n\treturn result.toDataStreamResponse();\n}\n",
      "type": "registry:page",
      "target": "app/api/ai/chat/route.ts"
    },
    {
      "path": "blocks/chat-02/components/app-sidebar.tsx",
      "content": "\"use client\";\n\nimport type * as React from \"react\";\n\nimport {\n\tSidebar,\n\tSidebarHeader,\n\tSidebarSeparator,\n} from \"@/components/ui/sidebar\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipProvider,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n\tChatInput,\n\tChatInputSubmit,\n\tChatInputTextArea,\n} from \"@/components/ui/chat-input\";\nimport {\n\tChatMessage,\n\tChatMessageAvatar,\n\tChatMessageContent,\n} from \"@/components/ui/chat-message\";\nimport { ChatMessageArea } from \"@/components/ui/chat-message-area\";\nimport { useChat } from \"ai/react\";\nimport { MessageCircle } from \"lucide-react\";\nimport { SquarePen } from \"lucide-react\";\n\nexport function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n\tconst { messages, input, handleInputChange, handleSubmit, isLoading, stop } =\n\t\tuseChat({\n\t\t\tapi: \"/api/ai/chat\",\n\t\t\tinitialMessages: [\n\t\t\t\t{\n\t\t\t\t\tid: \"1\",\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t\"Hi! I'm here to help you build amazing user interfaces. What kind of app are you working on?\",\n\t\t\t\t\trole: \"assistant\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"2\",\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t\"I want to build a task management app but I'm not sure where to start with the UI design.\",\n\t\t\t\t\trole: \"user\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"3\",\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t\"That's a great project! Let's break it down. For a task management app, we should focus on three key components: a clean navigation sidebar, a main task list view, and an intuitive task creation interface. Would you like to start with the layout structure first?\",\n\t\t\t\t\trole: \"assistant\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"4\",\n\t\t\t\t\tcontent: \"Yes, that sounds good! How should I organize the layout?\",\n\t\t\t\t\trole: \"user\",\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: \"5\",\n\t\t\t\t\tcontent:\n\t\t\t\t\t\t\"For the layout, I recommend a two-column design. The left sidebar can contain project categories and filters, while the main area shows your tasks. This is a common pattern that users are familiar with. Should we start designing the sidebar first?\",\n\t\t\t\t\trole: \"assistant\",\n\t\t\t\t},\n\t\t\t],\n\t\t\tonFinish: (message) => {\n\t\t\t\t//console.log(\"onFinish\", message, completion);\n\t\t\t},\n\t\t});\n\t\n\tconst handleSubmitMessage = () => {\n\t\tif (isLoading) {\n\t\t\treturn;\n\t\t}\n\t\thandleSubmit();\n\t};\n\n\treturn (\n\t\t<Sidebar {...props}>\n\t\t\t<SidebarHeader>\n\t\t\t\t<div className=\"flex items-center justify-between p-2\">\n\t\t\t\t\t<div className=\"flex items-center gap-3\">\n\t\t\t\t\t\t<div className=\"flex h-8 w-8 items-center justify-center rounded-lg bg-primary\">\n\t\t\t\t\t\t\t<MessageCircle className=\"h-5 w-5 text-primary-foreground\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<span className=\"text-lg font-semibold\">simple-ai</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* New Chat Button */}\n\t\t\t\t\t<TooltipProvider>\n\t\t\t\t\t\t<Tooltip>\n\t\t\t\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t\t\t\t<Button size=\"icon\" variant=\"ghost\">\n\t\t\t\t\t\t\t\t\t<SquarePen className=\"h-5 w-5\" />\n\t\t\t\t\t\t\t\t\t<span className=\"sr-only\">New Chat</span>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t\t<TooltipContent>\n\t\t\t\t\t\t\t\t<p>New Chat</p>\n\t\t\t\t\t\t\t</TooltipContent>\n\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t</TooltipProvider>\n\t\t\t\t</div>\n\t\t\t</SidebarHeader>\n\t\t\t<SidebarSeparator />\n\t\t\t<div className=\"flex-1 flex flex-col h-full overflow-y-auto\">\n\t\t\t\t<ChatMessageArea\n\t\t\t\t\tscrollButtonAlignment=\"center\"\n\t\t\t\t\tclassName=\"px-4 py-6 space-y-4\"\n\t\t\t\t>\n\t\t\t\t\t{messages.map((message) => {\n\t\t\t\t\t\tif (message.role !== \"user\") {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ChatMessage key={message.id} id={message.id}>\n\t\t\t\t\t\t\t\t\t<ChatMessageAvatar />\n\t\t\t\t\t\t\t\t\t<ChatMessageContent content={message.content} />\n\t\t\t\t\t\t\t\t</ChatMessage>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ChatMessage\n\t\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\t\tid={message.id}\n\t\t\t\t\t\t\t\tvariant=\"bubble\"\n\t\t\t\t\t\t\t\ttype=\"outgoing\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ChatMessageContent content={message.content} />\n\t\t\t\t\t\t\t</ChatMessage>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ChatMessageArea>\n\t\t\t\t<div className=\"p-4 max-w-2xl mx-auto w-full\">\n\t\t\t\t\t<ChatInput\n\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\tonChange={handleInputChange}\n\t\t\t\t\t\tonSubmit={handleSubmitMessage}\n\t\t\t\t\t\tloading={isLoading}\n\t\t\t\t\t\tonStop={stop}\n\t\t\t\t\t>\n\t\t\t\t\t\t<ChatInputTextArea placeholder=\"Type a message...\" />\n\t\t\t\t\t\t<ChatInputSubmit />\n\t\t\t\t\t</ChatInput>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Sidebar>\n\t);\n}\n",
      "type": "registry:component",
      "target": ""
    }
  ]
}