{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "chat-01",
	"type": "registry:block",
	"description": "A simple chat page.",
	"dependencies": ["ai", "@ai-sdk/react", "@ai-sdk/openai"],
	"registryDependencies": [
		"card",
		"breadcrumb",
		"separator",
		"sidebar",
		"tooltip",
		"button",
		"avatar",
		"dropdown-menu",
		"undefined/r/chat-input.json",
		"undefined/r/chat-message-area.json",
		"undefined/r/chat-message.json"
	],
	"files": [
		{
			"path": "./src/registry/blocks/chat-01/page.tsx",
			"content": "import { ChatMain } from \"@/registry/blocks/chat-01/components/chat/chat-main\";\nimport { AppLayout } from \"@/registry/blocks/chat-01/components/layout/app-layout\";\n\nexport default function Page() {\n\treturn (\n\t\t<AppLayout sidebarChildren={null}>\n\t\t\t<ChatMain />\n\t\t</AppLayout>\n\t);\n}\n",
			"type": "registry:page",
			"target": "app/chat/page.tsx"
		},
		{
			"path": "./src/registry/blocks/chat-01/route.ts",
			"content": "import { openai } from \"@ai-sdk/openai\";\nimport { convertToModelMessages, streamText } from \"ai\";\n\nexport async function POST(req: Request) {\n\tconst { messages } = await req.json();\n\n\tconst result = streamText({\n\t\tmodel: openai(\"gpt-5-nano\"),\n\t\tsystem: \"You are a helpful assistant\",\n\t\tmessages: convertToModelMessages(messages),\n\t});\n\n\treturn result.toUIMessageStreamResponse();\n}\n",
			"type": "registry:page",
			"target": "app/api/ai/chat/route.ts"
		},
		{
			"path": "./src/registry/blocks/chat-01/lib/config.ts",
			"content": "import { HomeIcon, SettingsIcon } from \"lucide-react\";\n\nexport const config: {\n\tmainRoutes: {\n\t\tpath: string;\n\t\tmatchExpression: RegExp;\n\t\tlabel: string;\n\t\ticon: React.ComponentType;\n\t}[];\n} = {\n\tmainRoutes: [\n\t\t{\n\t\t\tpath: \"/\",\n\t\t\tlabel: \"Home\",\n\t\t\tmatchExpression: /^\\/$/,\n\t\t\ticon: HomeIcon,\n\t\t},\n\t\t{\n\t\t\tpath: \"/settings\",\n\t\t\tlabel: \"Settings\",\n\t\t\tmatchExpression: /^\\/settings$/,\n\t\t\ticon: SettingsIcon,\n\t\t},\n\t],\n};\n",
			"type": "registry:lib"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/layout/app-layout.tsx",
			"content": "import { SidebarInset, SidebarProvider } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/registry/blocks/chat-01/components/layout/app-sidebar\";\n\nexport function AppLayout({\n\tchildren,\n\tsidebarChildren,\n}: {\n\tchildren: React.ReactNode;\n\tsidebarChildren: React.ReactNode;\n}) {\n\treturn (\n\t\t<SidebarProvider>\n\t\t\t<AppSidebar>{sidebarChildren}</AppSidebar>\n\t\t\t<div className=\"h-svh relative flex w-full flex-1 flex-col md:peer-data-[variant=inset]:p-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:pl-2 md:peer-data-[variant=inset]:pl-0\">\n\t\t\t\t<SidebarInset className=\"overflow-y-auto rounded-xl shadow\">\n\t\t\t\t\t{children}\n\t\t\t\t</SidebarInset>\n\t\t\t</div>\n\t\t</SidebarProvider>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/layout/app-layout-skeleton.tsx",
			"content": "import { SidebarInset } from \"@/components/ui/sidebar\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nfunction SkeletonSidebar() {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"bg-sidebar text-sidebar-foreground flex h-svh w-64 flex-col\"\n\t\t\tdata-slot=\"sidebar\"\n\t\t>\n\t\t\t<div className=\"flex flex-col gap-2 p-4\">\n\t\t\t\t<Skeleton className=\"h-8 w-32 mb-4\" />\n\t\t\t\t<Skeleton className=\"h-8 w-24 mb-2\" />\n\t\t\t\t<Skeleton className=\"h-8 w-24 mb-2\" />\n\t\t\t\t<Skeleton className=\"h-8 w-24 mb-2\" />\n\t\t\t</div>\n\t\t\t<div className=\"flex-1 flex flex-col gap-2 p-4\">\n\t\t\t\t{Array.from({ length: 5 }).map((_, i) => (\n\t\t\t\t\t<Skeleton\n\t\t\t\t\t\tkey={`skeleton-item-${\n\t\t\t\t\t\t\t// biome-ignore lint/suspicious/noArrayIndexKey: static skeleton items\n\t\t\t\t\t\t\ti\n\t\t\t\t\t\t}`}\n\t\t\t\t\t\tclassName=\"h-8 w-full mb-2\"\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div className=\"p-4 border-t border-sidebar-border\">\n\t\t\t\t<Skeleton className=\"h-8 w-20\" />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport function AppLayoutSkeleton() {\n\treturn (\n\t\t<div className=\"flex h-svh w-full overflow-hidden bg-sidebar\">\n\t\t\t<div data-variant=\"inset\" className=\"group peer\">\n\t\t\t\t<SkeletonSidebar />\n\t\t\t</div>\n\t\t\t<div className=\"h-svh relative flex w-full flex-1 flex-col md:peer-data-[variant=inset]:p-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:pl-2 md:peer-data-[variant=inset]:pl-0\">\n\t\t\t\t<SidebarInset className=\"overflow-y-auto rounded-xl shadow\">\n\t\t\t\t\t<div className=\"p-4 w-full h-full\">\n\t\t\t\t\t\t<Skeleton className=\"h-full w-full\" />\n\t\t\t\t\t</div>\n\t\t\t\t</SidebarInset>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/layout/app-sidebar.tsx",
			"content": "\"use client\";\n\nimport { PanelLeft, Search } from \"lucide-react\";\nimport { usePathname } from \"next/navigation\";\nimport type { ComponentProps } from \"react\";\nimport { LogoIcon } from \"@/components/icons/logo-icon\";\nimport {\n\tSidebar,\n\tSidebarContent,\n\tSidebarFooter,\n\tSidebarHeader,\n\tSidebarMenu,\n\tSidebarMenuButton,\n\tSidebarMenuItem,\n\tSidebarSeparator,\n\tuseSidebar,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport { AppMainNav } from \"@/registry/blocks/chat-01/components/layout/app-main-nav\";\nimport { AppSecondaryNav } from \"@/registry/blocks/chat-01/components/layout/app-secondary-nav\";\nimport { AppUserNav } from \"@/registry/blocks/chat-01/components/layout/app-user-nav\";\n\nexport function AppSidebar({ children }: ComponentProps<typeof Sidebar>) {\n\tconst { toggleSidebar } = useSidebar();\n\tconst pathname = usePathname();\n\n\treturn (\n\t\t<Sidebar variant=\"inset\" collapsible=\"icon\">\n\t\t\t<SidebarHeader>\n\t\t\t\t<SidebarMenu>\n\t\t\t\t\t<SidebarMenuItem className=\"flex items-center justify-between\">\n\t\t\t\t\t\t<LogoIcon className=\"size-6 group-data-[collapsible=icon]:hidden\" />\n\n\t\t\t\t\t\t<SidebarMenuButton\n\t\t\t\t\t\t\tclassName=\"w-fit [&>svg]:size-5 md:flex justify-center hidden\"\n\t\t\t\t\t\t\ttooltip=\"Toggle Sidebar\"\n\t\t\t\t\t\t\tvariant=\"default\"\n\t\t\t\t\t\t\tonClick={toggleSidebar}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<PanelLeft />\n\t\t\t\t\t\t\t<span className=\"sr-only\">Toggle Sidebar</span>\n\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t</SidebarMenuItem>\n\t\t\t\t</SidebarMenu>\n\t\t\t\t<SidebarMenu>\n\t\t\t\t\t<SidebarMenuItem className=\"flex items-center justify-between\">\n\t\t\t\t\t\t<SidebarMenuButton\n\t\t\t\t\t\t\ttooltip=\"Search\"\n\t\t\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\"group-data-[collapsible=icon]:bg-sidebar\",\n\t\t\t\t\t\t\t\t\"group-data-[collapsible=icon]:hover:bg-sidebar-accent\",\n\t\t\t\t\t\t\t\t\"group-data-[collapsible=icon]:shadow-none\",\n\t\t\t\t\t\t\t\t\"group-data-[collapsible=icon]:hover:shadow-none\",\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Search />\n\t\t\t\t\t\t\t<span>Search</span>\n\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t</SidebarMenuItem>\n\t\t\t\t</SidebarMenu>\n\t\t\t</SidebarHeader>\n\t\t\t<SidebarContent className=\"overflow-x-hidden\">\n\t\t\t\t<SidebarSeparator />\n\t\t\t\t<AppMainNav currentPath={pathname} />\n\t\t\t\t<SidebarSeparator className=\"group-data-[collapsible=icon]:hidden\" />\n\t\t\t\t{children}\n\t\t\t\t<AppSecondaryNav currentPath={pathname} className=\"mt-auto\" />\n\t\t\t</SidebarContent>\n\t\t\t<SidebarFooter>\n\t\t\t\t<AppUserNav />\n\t\t\t</SidebarFooter>\n\t\t</Sidebar>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/layout/app-main-nav.tsx",
			"content": "import Link from \"next/link\";\nimport type { ComponentProps } from \"react\";\nimport {\n\tSidebarGroup,\n\tSidebarGroupContent,\n\tSidebarMenu,\n\tSidebarMenuButton,\n\tSidebarMenuItem,\n} from \"@/components/ui/sidebar\";\nimport { config } from \"@/registry/blocks/chat-01/lib/config\";\n\nexport function AppMainNav({\n\tcurrentPath,\n\t...props\n}: ComponentProps<typeof SidebarGroup> & { currentPath: string }) {\n\treturn (\n\t\t<SidebarGroup {...props}>\n\t\t\t<SidebarGroupContent>\n\t\t\t\t<SidebarMenu>\n\t\t\t\t\t{config.mainRoutes.map((item, index) => (\n\t\t\t\t\t\t<SidebarMenuItem key={`${item.path}-${index}`}>\n\t\t\t\t\t\t\t<SidebarMenuButton\n\t\t\t\t\t\t\t\ttooltip={item.label}\n\t\t\t\t\t\t\t\tisActive={item.matchExpression.test(\n\t\t\t\t\t\t\t\t\tcurrentPath,\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\tasChild\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Link href={item.path}>\n\t\t\t\t\t\t\t\t\t{item.icon && <item.icon />}\n\t\t\t\t\t\t\t\t\t<span>{item.label}</span>\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t\t</SidebarMenuItem>\n\t\t\t\t\t))}\n\t\t\t\t</SidebarMenu>\n\t\t\t</SidebarGroupContent>\n\t\t</SidebarGroup>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/layout/app-secondary-nav.tsx",
			"content": "import { Settings, Sun } from \"lucide-react\";\nimport type { ComponentProps } from \"react\";\nimport {\n\tSidebarGroup,\n\tSidebarGroupContent,\n\tSidebarMenu,\n\tSidebarMenuButton,\n\tSidebarMenuItem,\n} from \"@/components/ui/sidebar\";\n\nexport function AppSecondaryNav({\n\tcurrentPath,\n\t...props\n}: ComponentProps<typeof SidebarGroup> & {\n\tcurrentPath: string;\n}) {\n\treturn (\n\t\t<SidebarGroup {...props}>\n\t\t\t<SidebarGroupContent>\n\t\t\t\t<SidebarMenu>\n\t\t\t\t\t<SidebarMenuItem>\n\t\t\t\t\t\t<SidebarMenuButton size=\"sm\" tooltip=\"Settings\">\n\t\t\t\t\t\t\t<Settings />\n\t\t\t\t\t\t\t<span>Settings</span>\n\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t</SidebarMenuItem>\n\t\t\t\t\t<SidebarMenuItem>\n\t\t\t\t\t\t<SidebarMenuButton size=\"sm\" tooltip=\"Theme\">\n\t\t\t\t\t\t\t<Sun />\n\t\t\t\t\t\t\t<span>Theme</span>\n\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t</SidebarMenuItem>\n\t\t\t\t</SidebarMenu>\n\t\t\t</SidebarGroupContent>\n\t\t</SidebarGroup>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/layout/app-user-nav.tsx",
			"content": "\"use client\";\n\nimport { ChevronsUpDown, LogOut } from \"lucide-react\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuItem,\n\tDropdownMenuLabel,\n\tDropdownMenuSeparator,\n\tDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n\tSidebarMenu,\n\tSidebarMenuButton,\n\tSidebarMenuItem,\n\tuseSidebar,\n} from \"@/components/ui/sidebar\";\n\nconst MOCK_USER = {\n\tname: \"John Doe\",\n\temail: \"john.doe@example.com\",\n\timage: \"/avatar-1.png\",\n\torganization: {\n\t\tname: \"Acme Inc.\",\n\t},\n};\n\nexport function AppUserNav() {\n\tconst { isMobile } = useSidebar();\n\n\tconst user = MOCK_USER;\n\tconst activeOrganization = user.organization;\n\treturn (\n\t\t<SidebarMenu>\n\t\t\t<SidebarMenuItem>\n\t\t\t\t<DropdownMenu>\n\t\t\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t\t\t<SidebarMenuButton\n\t\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\t\tclassName=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Avatar className=\"h-8 w-8 rounded-lg\">\n\t\t\t\t\t\t\t\t<AvatarImage\n\t\t\t\t\t\t\t\t\tsrc={user.image ?? undefined}\n\t\t\t\t\t\t\t\t\talt={user.name}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<AvatarFallback className=\"rounded-lg\">\n\t\t\t\t\t\t\t\t\t{user.name?.substring(0, 2).toUpperCase()}\n\t\t\t\t\t\t\t\t</AvatarFallback>\n\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t\t<div className=\"grid flex-1 text-left text-sm leading-tight\">\n\t\t\t\t\t\t\t\t<span className=\"truncate font-semibold\">\n\t\t\t\t\t\t\t\t\t{user.name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span className=\"truncate text-xs\">\n\t\t\t\t\t\t\t\t\t{user.email}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<ChevronsUpDown className=\"ml-auto size-4\" />\n\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t</DropdownMenuTrigger>\n\t\t\t\t\t<DropdownMenuContent\n\t\t\t\t\t\tclassName=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\"\n\t\t\t\t\t\tside={isMobile ? \"bottom\" : \"right\"}\n\t\t\t\t\t\talign=\"end\"\n\t\t\t\t\t\tsideOffset={4}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DropdownMenuLabel className=\"p-0 font-normal\">\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n\t\t\t\t\t\t\t\t<Avatar className=\"h-8 w-8 rounded-lg\">\n\t\t\t\t\t\t\t\t\t<AvatarImage\n\t\t\t\t\t\t\t\t\t\tsrc={user.image ?? undefined}\n\t\t\t\t\t\t\t\t\t\talt={user.name}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<AvatarFallback className=\"rounded-lg\">\n\t\t\t\t\t\t\t\t\t\t{user.name\n\t\t\t\t\t\t\t\t\t\t\t?.substring(0, 2)\n\t\t\t\t\t\t\t\t\t\t\t.toUpperCase()}\n\t\t\t\t\t\t\t\t\t</AvatarFallback>\n\t\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t\t\t<div className=\"grid flex-1 text-left text-sm leading-tight\">\n\t\t\t\t\t\t\t\t\t<span className=\"truncate font-semibold\">\n\t\t\t\t\t\t\t\t\t\t{user.name}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span className=\"truncate text-xs\">\n\t\t\t\t\t\t\t\t\t\t{user.email}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</DropdownMenuLabel>\n\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t<div className=\"px-2 py-2 flex items-center justify-start gap-2\">\n\t\t\t\t\t\t\t<span className=\"text-sm font-medium text-muted-foreground\">\n\t\t\t\t\t\t\t\tOrganization:\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span className=\"truncate font-semibold text-sm\">\n\t\t\t\t\t\t\t\t{activeOrganization?.name}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\t\t<LogOut className=\"mr-2 size-4\" />\n\t\t\t\t\t\t\tLog out\n\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t</DropdownMenuContent>\n\t\t\t\t</DropdownMenu>\n\t\t\t</SidebarMenuItem>\n\t\t</SidebarMenu>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/chat/chat-main.tsx",
			"content": "import { ChatContent } from \"@/registry/blocks/chat-01/components/chat/chat-content\";\nimport { ChatHeader } from \"@/registry/blocks/chat-01/components/chat/chat-header\";\n\nexport function ChatMain() {\n\treturn (\n\t\t<div className=\"flex-1 flex flex-col h-full\">\n\t\t\t<ChatHeader />\n\t\t\t<ChatContent />\n\t\t</div>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/chat/chat-header.tsx",
			"content": "import { MessagesSquare, Users } from \"lucide-react\";\nimport type { ComponentProps } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { cn } from \"@/lib/utils\";\nimport {\n\tAppHeader,\n\tAppHeaderIcon,\n\tAppHeaderSeparator,\n} from \"@/registry/blocks/chat-01/components/layout/app-header\";\n\nexport function ChatHeader() {\n\tconst connectionStatus = \"connected\";\n\treturn (\n\t\t<AppHeader>\n\t\t\t<AppHeaderIcon className=\"hidden md:flex\">\n\t\t\t\t<MessagesSquare />\n\t\t\t</AppHeaderIcon>\n\t\t\t<AppHeaderSeparator className=\"hidden md:block\" />\n\n\t\t\t<ChatHeaderRoomName>Dev Team</ChatHeaderRoomName>\n\t\t\t<div className=\"ml-auto flex items-center\">\n\t\t\t\t<ChatHeaderRoomMemberCount>{10}</ChatHeaderRoomMemberCount>\n\t\t\t\t<AppHeaderSeparator />\n\t\t\t\t<Tooltip>\n\t\t\t\t\t<TooltipTrigger>\n\t\t\t\t\t\t<ChatRoomConnectionStatus\n\t\t\t\t\t\t\tconnectionStatus={connectionStatus}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t<TooltipContent side=\"bottom\">\n\t\t\t\t\t\t<p className=\"capitalize\">{connectionStatus}</p>\n\t\t\t\t\t</TooltipContent>\n\t\t\t\t</Tooltip>\n\t\t\t</div>\n\t\t</AppHeader>\n\t);\n}\n\nfunction ChatHeaderRoomName({\n\tclassName,\n\t...props\n}: ComponentProps<typeof Button>) {\n\treturn (\n\t\t<Button\n\t\t\tvariant=\"ghost\"\n\t\t\tsize=\"sm\"\n\t\t\tclassName={cn(\"text-base h-7\", className)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n\nfunction ChatHeaderRoomMemberCount({\n\tclassName,\n\tchildren,\n\t...props\n}: ComponentProps<typeof Button> & { children: number }) {\n\treturn (\n\t\t<Button variant=\"ghost\" size=\"sm\" className=\"gap-2 h-7\" {...props}>\n\t\t\t<Users className=\"h-4 w-4\" />\n\t\t\t{children}\n\t\t</Button>\n\t);\n}\n\nfunction ChatRoomConnectionStatus({\n\tclassName,\n\tconnectionStatus,\n\t...props\n}: ComponentProps<\"div\"> & {\n\tconnectionStatus: \"connected\" | \"connecting\" | \"disconnected\";\n}) {\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\n\t\t\t\t\"h-2 w-2 rounded-full transition-colors\",\n\t\t\t\t{\n\t\t\t\t\t\"bg-green-500\": connectionStatus === \"connected\",\n\t\t\t\t\t\"bg-yellow-500\": connectionStatus === \"connecting\",\n\t\t\t\t\t\"bg-orange-500\": connectionStatus === \"disconnected\",\n\t\t\t\t},\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t{...props}\n\t\t/>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/chat/chat-content.tsx",
			"content": "\"use client\";\n\nimport { useChat } from \"@ai-sdk/react\";\nimport { DefaultChatTransport, type UIMessage } from \"ai\";\nimport { Copy, ThumbsUp } from \"lucide-react\";\nimport type { ComponentPropsWithoutRef } from \"react\";\nimport { useTrackEvent } from \"@/lib/events\";\nimport {\n\tChatInput,\n\tChatInputEditor,\n\tChatInputGroupAddon,\n\tChatInputSubmitButton,\n\tuseChatInput,\n} from \"@/registry/ui/chat-input\";\nimport {\n\tChatMessage,\n\tChatMessageAction,\n\tChatMessageActions,\n\tChatMessageAuthor,\n\tChatMessageAvatar,\n\tChatMessageAvatarFallback,\n\tChatMessageAvatarImage,\n\tChatMessageContainer,\n\tChatMessageContent,\n\tChatMessageHeader,\n\tChatMessageMarkdown,\n\tChatMessageThread,\n\tChatMessageThreadAction,\n\tChatMessageThreadReplyCount,\n\tChatMessageThreadTimestamp,\n\tChatMessageTimestamp,\n} from \"@/registry/ui/chat-message\";\nimport {\n\tChatMessageArea,\n\tChatMessageAreaContent,\n\tChatMessageAreaScrollButton,\n} from \"@/registry/ui/chat-message-area\";\n\nconst INITIAL_MESSAGES: UIMessage<{\n\tmember: {\n\t\timage: string;\n\t\tname: string;\n\t};\n\tthreadData?: {\n\t\tmember: {\n\t\t\timage: string;\n\t\t\tname: string;\n\t\t};\n\t\tmessageCount: number;\n\t\tlastReply: Date;\n\t};\n}>[] = [\n\t{\n\t\tid: \"1\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Hi! I need help organizing my project management workflow. Can you guide me through some best practices?\",\n\t\t\t},\n\t\t],\n\t\trole: \"user\",\n\t\tmetadata: {\n\t\t\tmember: {\n\t\t\t\timage: \"/avatar-1.png\",\n\t\t\t\tname: \"Pedro\",\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tid: \"2\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"I'd be happy to help you with project management best practices! Here's a structured approach:\\n\\n#### 1. Project Initiation\\n- Define clear project objectives\\n- Identify key stakeholders\\n- Set measurable goals\\n- Create project charter\\n\\n#### 2. Planning Phase\\n- Break down work into tasks\\n- Set priorities\\n- Create timeline\\n- Assign responsibilities\\n\\nWould you like me to elaborate on any of these points?\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t\tmetadata: {\n\t\t\tmember: {\n\t\t\t\timage: \"/avatar-2.png\",\n\t\t\t\tname: \"Travel Assistant\",\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tid: \"3\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Yes, please tell me more about breaking down work into tasks. How should I approach this?\",\n\t\t\t},\n\t\t],\n\t\trole: \"user\",\n\t\tmetadata: {\n\t\t\tmember: {\n\t\t\t\timage: \"/avatar-1.png\",\n\t\t\t\tname: \"Pedro\",\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tid: \"4\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Breaking down work into tasks is crucial for project success. Here's a detailed approach:\\n\\n##### Work Breakdown Structure (WBS)\\n1. **Start with major deliverables**\\n   - Identify end goals\\n   - List main project phases\\n\\n2. **Break into smaller components**\\n   - Tasks should be:\\n     - Specific\\n     - Measurable\\n     - Achievable\\n     - Time-bound\\n\\n3. **Task Estimation**\\n   ```\\n   Task Example:\\n   - Name: User Authentication Feature\\n   - Duration: 3 days\\n   - Dependencies: Database setup\\n   - Priority: High\\n   ```\\n\\n4. **Use the 8/80 Rule**\\n   - Tasks shouldn't take less than 8 hours\\n   - Or more than 80 hours\\n   - If they do, break them down further\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t\tmetadata: {\n\t\t\tmember: {\n\t\t\t\timage: \"/avatar-2.png\",\n\t\t\t\tname: \"Travel Assistant\",\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tid: \"5\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"That's really helpful! What tools would you recommend for tracking all these tasks?\",\n\t\t\t},\n\t\t],\n\t\trole: \"user\",\n\t\tmetadata: {\n\t\t\tmember: {\n\t\t\t\timage: \"/avatar-1.png\",\n\t\t\t\tname: \"Pedro\",\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tid: \"6\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Here are some popular project management tools:\\n\\n##### Tips for Tool Selection\\n- ✅ Consider team size\\n- ✅ Integration needs\\n- ✅ Learning curve\\n- ✅ Budget constraints\\n\\nWould you like specific recommendations based on your team's needs?\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t\tmetadata: {\n\t\t\tmember: {\n\t\t\t\timage: \"/avatar-2.png\",\n\t\t\t\tname: \"Travel Assistant\",\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tid: \"7\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Yes, we're a small team of 5 developers. What would work best for us?\",\n\t\t\t},\n\t\t],\n\t\trole: \"user\",\n\t\tmetadata: {\n\t\t\tmember: {\n\t\t\t\timage: \"/avatar-1.png\",\n\t\t\t\tname: \"Pedro\",\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tid: \"8\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"For a team of 5 developers, I'd recommend:\\n\\n##### Primary Choice: Jira Software\\n\\n**Advantages:**\\n- 🔧 Built for development teams\\n- 📊 Great for agile workflows\\n- 🔄 Git integration\\n- 📱 Mobile apps\\n\\n##### Alternative: ClickUp\\n\\n**Benefits:**\\n- 💰 Cost-effective\\n- 🎨 More flexible\\n- 🚀 Faster setup\\n\\n```\\nRecommended Setup:\\n- Sprint Length: 2 weeks\\n- Board Structure:\\n  - Backlog\\n  - To Do\\n  - In Progress\\n  - Code Review\\n  - Testing\\n  - Done\\n- Key Features:\\n  - Story Points\\n  - Time Tracking\\n  - Sprint Reports\\n```\\n\\nWould you like me to explain how to set up the recommended workflow in either of these tools?\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t\tmetadata: {\n\t\t\tmember: {\n\t\t\t\timage: \"/avatar-1.png\",\n\t\t\t\tname: \"Pedro\",\n\t\t\t},\n\t\t\tthreadData: {\n\t\t\t\tlastReply: new Date(),\n\t\t\t\tmember: {\n\t\t\t\t\timage: \"/avatar-2.png\",\n\t\t\t\t\tname: \"Travel Assistant\",\n\t\t\t\t},\n\t\t\t\tmessageCount: 10,\n\t\t\t},\n\t\t},\n\t},\n];\n\nexport function ChatContent({\n\tclassName,\n\t...props\n}: ComponentPropsWithoutRef<\"div\">) {\n\tconst { messages, sendMessage, status, stop } = useChat({\n\t\ttransport: new DefaultChatTransport({\n\t\t\tapi: \"/api/ai/chat\",\n\t\t}),\n\t\tmessages: INITIAL_MESSAGES,\n\t\tonFinish: ({ message }) => {\n\t\t\t//console.log(\"onFinish\", message, completion);\n\t\t\ttrack({\n\t\t\t\tname: \"block_used\",\n\t\t\t\tproperties: {\n\t\t\t\t\tused_block: \"chat-01\",\n\t\t\t\t\tused_block_ai_completion: JSON.stringify(\n\t\t\t\t\t\tmessage.parts,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t2,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t});\n\n\tconst isLoading = status === \"streaming\" || status === \"submitted\";\n\tconst track = useTrackEvent();\n\n\t// Use the new hook with custom onSubmit\n\tconst { value, onChange, handleSubmit } = useChatInput({\n\t\tonSubmit: (parsedValue) => {\n\t\t\t// Custom logic: log, send, access type-safe fields\n\t\t\tconsole.log(\"Submitted parsed:\", parsedValue);\n\n\t\t\tsendMessage({\n\t\t\t\trole: \"user\",\n\t\t\t\tparts: [{ type: \"text\", text: parsedValue.content }],\n\t\t\t});\n\t\t},\n\t});\n\n\treturn (\n\t\t<div className=\"flex-1 flex flex-col overflow-y-auto\" {...props}>\n\t\t\t<ChatMessageArea>\n\t\t\t\t<ChatMessageAreaContent className=\"pt-6\">\n\t\t\t\t\t{messages.map((message) => {\n\t\t\t\t\t\tconst userName =\n\t\t\t\t\t\t\tmessage.role === \"user\" ? \"You\" : \"Assistant\";\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ChatMessage key={message.id}>\n\t\t\t\t\t\t\t\t<ChatMessageActions>\n\t\t\t\t\t\t\t\t\t<ChatMessageAction label=\"Copy\">\n\t\t\t\t\t\t\t\t\t\t<Copy className=\"size-4\" />\n\t\t\t\t\t\t\t\t\t</ChatMessageAction>\n\t\t\t\t\t\t\t\t\t<ChatMessageAction label=\"Like\">\n\t\t\t\t\t\t\t\t\t\t<ThumbsUp className=\"size-4\" />\n\t\t\t\t\t\t\t\t\t</ChatMessageAction>\n\t\t\t\t\t\t\t\t</ChatMessageActions>\n\t\t\t\t\t\t\t\t<ChatMessageAvatar>\n\t\t\t\t\t\t\t\t\t<ChatMessageAvatarImage\n\t\t\t\t\t\t\t\t\t\tsrc={message.metadata?.member.image}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<ChatMessageAvatarFallback>\n\t\t\t\t\t\t\t\t\t\t{message.metadata?.member.name\n\t\t\t\t\t\t\t\t\t\t\t.charAt(0)\n\t\t\t\t\t\t\t\t\t\t\t.toUpperCase()}\n\t\t\t\t\t\t\t\t\t</ChatMessageAvatarFallback>\n\t\t\t\t\t\t\t\t</ChatMessageAvatar>\n\n\t\t\t\t\t\t\t\t<ChatMessageContainer>\n\t\t\t\t\t\t\t\t\t<ChatMessageHeader>\n\t\t\t\t\t\t\t\t\t\t<ChatMessageAuthor>\n\t\t\t\t\t\t\t\t\t\t\t{userName}\n\t\t\t\t\t\t\t\t\t\t</ChatMessageAuthor>\n\t\t\t\t\t\t\t\t\t\t<ChatMessageTimestamp\n\t\t\t\t\t\t\t\t\t\t\tcreatedAt={new Date()}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</ChatMessageHeader>\n\n\t\t\t\t\t\t\t\t\t<ChatMessageContent>\n\t\t\t\t\t\t\t\t\t\t{message.parts\n\t\t\t\t\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t(part) => part.type === \"text\",\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t.map((part) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<ChatMessageMarkdown\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={part.type}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontent={part.text}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ChatMessageContent>\n\n\t\t\t\t\t\t\t\t\t{message.metadata?.threadData && (\n\t\t\t\t\t\t\t\t\t\t<ChatMessageThread>\n\t\t\t\t\t\t\t\t\t\t\t<ChatMessageAvatar>\n\t\t\t\t\t\t\t\t\t\t\t\t<ChatMessageAvatarImage\n\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.metadata\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.threadData.member\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.image\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t<ChatMessageAvatarFallback>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{message.metadata.threadData.member.name\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.charAt(0)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.toUpperCase()}\n\t\t\t\t\t\t\t\t\t\t\t\t</ChatMessageAvatarFallback>\n\t\t\t\t\t\t\t\t\t\t\t</ChatMessageAvatar>\n\t\t\t\t\t\t\t\t\t\t\t<ChatMessageThreadReplyCount>\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.metadata.threadData\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.messageCount\n\t\t\t\t\t\t\t\t\t\t\t\t}{\" \"}\n\t\t\t\t\t\t\t\t\t\t\t\treplies\n\t\t\t\t\t\t\t\t\t\t\t</ChatMessageThreadReplyCount>\n\t\t\t\t\t\t\t\t\t\t\t<ChatMessageThreadTimestamp\n\t\t\t\t\t\t\t\t\t\t\t\tdate={\n\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.metadata.threadData\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.lastReply\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t<ChatMessageThreadAction />\n\t\t\t\t\t\t\t\t\t\t</ChatMessageThread>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</ChatMessageContainer>\n\t\t\t\t\t\t\t</ChatMessage>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ChatMessageAreaContent>\n\t\t\t\t<ChatMessageAreaScrollButton alignment=\"center\" />\n\t\t\t</ChatMessageArea>\n\t\t\t<div className=\"px-2 py-4 max-w-2xl mx-auto w-full\">\n\t\t\t\t<ChatInput\n\t\t\t\t\tonSubmit={handleSubmit}\n\t\t\t\t\tisStreaming={isLoading}\n\t\t\t\t\tonStop={stop}\n\t\t\t\t>\n\t\t\t\t\t<ChatInputEditor\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tplaceholder=\"Type a message...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<ChatInputGroupAddon align=\"block-end\">\n\t\t\t\t\t\t<ChatInputSubmitButton className=\"ml-auto\" />\n\t\t\t\t\t</ChatInputGroupAddon>\n\t\t\t\t</ChatInput>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
			"type": "registry:component"
		}
	],
	"categories": ["chat"]
}
