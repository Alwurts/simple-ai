{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "chat-01",
	"type": "registry:block",
	"description": "A simple chat page.",
	"dependencies": ["ai", "@ai-sdk/openai"],
	"registryDependencies": [
		"card",
		"breadcrumb",
		"separator",
		"sidebar",
		"tooltip",
		"button",
		"avatar",
		"dropdown-menu",
		"undefined/r/chat-input.json",
		"undefined/r/chat-message-area.json",
		"undefined/r/chat-message.json"
	],
	"files": [
		{
			"path": "./src/registry/blocks/chat-01/page.tsx",
			"content": "import {\n\tBreadcrumb,\n\tBreadcrumbItem,\n\tBreadcrumbList,\n\tBreadcrumbPage,\n} from \"@/components/ui/breadcrumb\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n\tSidebarInset,\n\tSidebarProvider,\n\tSidebarTrigger,\n} from \"@/components/ui/sidebar\";\nimport { Chat } from \"@/registry/blocks/chat-01/components/chat\";\nimport { SidebarApp } from \"@/registry/blocks/chat-01/components/sidebar-app\";\n\nexport default function Page() {\n\treturn (\n\t\t<SidebarProvider>\n\t\t\t<SidebarApp />\n\t\t\t<SidebarInset className=\"flex flex-col h-screen overflow-y-auto\">\n\t\t\t\t<header className=\"sticky top-0 flex h-14 shrink-0 items-center gap-2 bg-background\">\n\t\t\t\t\t<div className=\"flex flex-1 items-center gap-2 px-3\">\n\t\t\t\t\t\t<SidebarTrigger />\n\t\t\t\t\t\t<Separator\n\t\t\t\t\t\t\torientation=\"vertical\"\n\t\t\t\t\t\t\tclassName=\"mr-2 h-4\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Breadcrumb>\n\t\t\t\t\t\t\t<BreadcrumbList>\n\t\t\t\t\t\t\t\t<BreadcrumbItem>\n\t\t\t\t\t\t\t\t\t<BreadcrumbPage className=\"line-clamp-1\">\n\t\t\t\t\t\t\t\t\t\tProject Management & Task Tracking\n\t\t\t\t\t\t\t\t\t</BreadcrumbPage>\n\t\t\t\t\t\t\t\t</BreadcrumbItem>\n\t\t\t\t\t\t\t</BreadcrumbList>\n\t\t\t\t\t\t</Breadcrumb>\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\t\t\t\t<Chat />\n\t\t\t</SidebarInset>\n\t\t</SidebarProvider>\n\t);\n}\n",
			"type": "registry:page",
			"target": "app/chat/page.tsx"
		},
		{
			"path": "./src/registry/blocks/chat-01/route.ts",
			"content": "import { openai } from \"@ai-sdk/openai\";\nimport { convertToModelMessages, streamText } from \"ai\";\n\nexport async function POST(req: Request) {\n\tconst { messages } = await req.json();\n\n\tconst result = streamText({\n\t\tmodel: openai(\"gpt-5-nano\"),\n\t\tsystem: \"You are a helpful assistant\",\n\t\tmessages: convertToModelMessages(messages),\n\t});\n\n\treturn result.toUIMessageStreamResponse();\n}\n",
			"type": "registry:page",
			"target": "app/api/ai/chat/route.ts"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/chat.tsx",
			"content": "\"use client\";\n\nimport { useChat } from \"@ai-sdk/react\";\nimport { DefaultChatTransport, type UIMessage } from \"ai\";\nimport type { ComponentPropsWithoutRef } from \"react\";\nimport { useTrackEvent } from \"@/lib/events\";\nimport {\n\tChatInput,\n\tChatInputEditor,\n\tChatInputGroupAddon,\n\tChatInputSubmitButton,\n\tuseChatInput,\n} from \"@/registry/ui/chat-input-tip\";\nimport {\n\tChatMessage,\n\tChatMessageAvatar,\n\tChatMessageContent,\n} from \"@/registry/ui/chat-message\";\nimport {\n\tMessageArea,\n\tMessageAreaContent,\n\tMessageAreaScrollButton,\n} from \"@/registry/ui/message-area\";\n\nconst INITIAL_MESSAGES: UIMessage[] = [\n\t{\n\t\tid: \"1\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Hi! I need help organizing my project management workflow. Can you guide me through some best practices?\",\n\t\t\t},\n\t\t],\n\t\trole: \"user\",\n\t},\n\t{\n\t\tid: \"2\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"I'd be happy to help you with project management best practices! Here's a structured approach:\\n\\n#### 1. Project Initiation\\n- Define clear project objectives\\n- Identify key stakeholders\\n- Set measurable goals\\n- Create project charter\\n\\n#### 2. Planning Phase\\n- Break down work into tasks\\n- Set priorities\\n- Create timeline\\n- Assign responsibilities\\n\\nWould you like me to elaborate on any of these points?\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t},\n\t{\n\t\tid: \"3\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Yes, please tell me more about breaking down work into tasks. How should I approach this?\",\n\t\t\t},\n\t\t],\n\t\trole: \"user\",\n\t},\n\t{\n\t\tid: \"4\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Breaking down work into tasks is crucial for project success. Here's a detailed approach:\\n\\n##### Work Breakdown Structure (WBS)\\n1. **Start with major deliverables**\\n   - Identify end goals\\n   - List main project phases\\n\\n2. **Break into smaller components**\\n   - Tasks should be:\\n     - Specific\\n     - Measurable\\n     - Achievable\\n     - Time-bound\\n\\n3. **Task Estimation**\\n   ```\\n   Task Example:\\n   - Name: User Authentication Feature\\n   - Duration: 3 days\\n   - Dependencies: Database setup\\n   - Priority: High\\n   ```\\n\\n4. **Use the 8/80 Rule**\\n   - Tasks shouldn't take less than 8 hours\\n   - Or more than 80 hours\\n   - If they do, break them down further\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t},\n\t{\n\t\tid: \"5\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"That's really helpful! What tools would you recommend for tracking all these tasks?\",\n\t\t\t},\n\t\t],\n\t\trole: \"user\",\n\t},\n\t{\n\t\tid: \"6\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Here are some popular project management tools:\\n\\n##### Tips for Tool Selection\\n- âœ… Consider team size\\n- âœ… Integration needs\\n- âœ… Learning curve\\n- âœ… Budget constraints\\n\\nWould you like specific recommendations based on your team's needs?\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t},\n\t{\n\t\tid: \"7\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Yes, we're a small team of 5 developers. What would work best for us?\",\n\t\t\t},\n\t\t],\n\t\trole: \"user\",\n\t},\n\t{\n\t\tid: \"8\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"For a team of 5 developers, I'd recommend:\\n\\n##### Primary Choice: Jira Software\\n\\n**Advantages:**\\n- ðŸ”§ Built for development teams\\n- ðŸ“Š Great for agile workflows\\n- ðŸ”„ Git integration\\n- ðŸ“± Mobile apps\\n\\n##### Alternative: ClickUp\\n\\n**Benefits:**\\n- ðŸ’° Cost-effective\\n- ðŸŽ¨ More flexible\\n- ðŸš€ Faster setup\\n\\n```\\nRecommended Setup:\\n- Sprint Length: 2 weeks\\n- Board Structure:\\n  - Backlog\\n  - To Do\\n  - In Progress\\n  - Code Review\\n  - Testing\\n  - Done\\n- Key Features:\\n  - Story Points\\n  - Time Tracking\\n  - Sprint Reports\\n```\\n\\nWould you like me to explain how to set up the recommended workflow in either of these tools?\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t},\n];\n\nexport function Chat({ className, ...props }: ComponentPropsWithoutRef<\"div\">) {\n\tconst { messages, sendMessage, status, stop } = useChat({\n\t\ttransport: new DefaultChatTransport({\n\t\t\tapi: \"/api/ai/chat\",\n\t\t}),\n\t\tmessages: INITIAL_MESSAGES,\n\t\tonFinish: ({ message }) => {\n\t\t\t//console.log(\"onFinish\", message, completion);\n\t\t\ttrack({\n\t\t\t\tname: \"block_used\",\n\t\t\t\tproperties: {\n\t\t\t\t\tused_block: \"chat-01\",\n\t\t\t\t\tused_block_ai_completion: JSON.stringify(\n\t\t\t\t\t\tmessage.parts,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t2,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t});\n\n\tconst isLoading = status === \"streaming\" || status === \"submitted\";\n\tconst track = useTrackEvent();\n\n\t// Use the new hook with custom onSubmit\n\tconst { value, onChange, handleSubmit } = useChatInput({\n\t\tonSubmit: (parsedValue) => {\n\t\t\t// Custom logic: log, send, access type-safe fields\n\t\t\tconsole.log(\"Submitted parsed:\", parsedValue);\n\n\t\t\tsendMessage({\n\t\t\t\trole: \"user\",\n\t\t\t\tparts: [{ type: \"text\", text: parsedValue.content }],\n\t\t\t});\n\t\t},\n\t});\n\n\treturn (\n\t\t<div className=\"flex-1 flex flex-col h-full overflow-y-auto\" {...props}>\n\t\t\t<MessageArea>\n\t\t\t\t<MessageAreaContent>\n\t\t\t\t\t{messages.map((message) => {\n\t\t\t\t\t\tif (message.role !== \"user\") {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ChatMessage key={message.id} id={message.id}>\n\t\t\t\t\t\t\t\t\t<ChatMessageAvatar />\n\t\t\t\t\t\t\t\t\t{message.parts\n\t\t\t\t\t\t\t\t\t\t.filter((part) => part.type === \"text\")\n\t\t\t\t\t\t\t\t\t\t.map((part) => (\n\t\t\t\t\t\t\t\t\t\t\t<ChatMessageContent\n\t\t\t\t\t\t\t\t\t\t\t\tkey={part.type}\n\t\t\t\t\t\t\t\t\t\t\t\tcontent={part.text}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ChatMessage>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ChatMessage\n\t\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\t\tid={message.id}\n\t\t\t\t\t\t\t\tvariant=\"bubble\"\n\t\t\t\t\t\t\t\ttype=\"outgoing\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{message.parts\n\t\t\t\t\t\t\t\t\t.filter((part) => part.type === \"text\")\n\t\t\t\t\t\t\t\t\t.map((part) => (\n\t\t\t\t\t\t\t\t\t\t<ChatMessageContent\n\t\t\t\t\t\t\t\t\t\t\tkey={part.type}\n\t\t\t\t\t\t\t\t\t\t\tcontent={part.text}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ChatMessage>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</MessageAreaContent>\n\t\t\t\t<MessageAreaScrollButton alignment=\"center\" />\n\t\t\t</MessageArea>\n\t\t\t<div className=\"px-2 py-4 max-w-2xl mx-auto w-full\">\n\t\t\t\t<ChatInput\n\t\t\t\t\tonSubmit={handleSubmit}\n\t\t\t\t\tisStreaming={isLoading}\n\t\t\t\t\tonStop={stop}\n\t\t\t\t>\n\t\t\t\t\t<ChatInputEditor\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tplaceholder=\"Type a message...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<ChatInputGroupAddon align=\"block-end\">\n\t\t\t\t\t\t<ChatInputSubmitButton className=\"ml-auto\" />\n\t\t\t\t\t</ChatInputGroupAddon>\n\t\t\t\t</ChatInput>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/sidebar-app.tsx",
			"content": "\"use client\";\n\nimport { MessageCircle, SquarePen } from \"lucide-react\";\nimport type { ComponentProps } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tSidebar,\n\tSidebarContent,\n\tSidebarFooter,\n\tSidebarGroup,\n\tSidebarGroupLabel,\n\tSidebarHeader,\n\tSidebarMenu,\n\tSidebarMenuButton,\n\tSidebarMenuItem,\n\tSidebarRail,\n} from \"@/components/ui/sidebar\";\nimport {\n\tTooltip,\n\tTooltipContent,\n\tTooltipProvider,\n\tTooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport { NavUser } from \"@/registry/blocks/chat-01/components/nav-user\";\n\n// This is sample data.\nconst data = {\n\tuser: {\n\t\tname: \"John Doe\",\n\t\temail: \"m@example.com\",\n\t\tavatar: \"/avatar-1.png\",\n\t},\n\trecentChats: [\n\t\t{\n\t\t\ttitle: \"Project Planning Assistant\",\n\t\t\tdate: new Date(2024, 2, 20),\n\t\t\turl: \"#\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Code Review Helper\",\n\t\t\tdate: new Date(2024, 2, 19),\n\t\t\turl: \"#\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Bug Analysis Chat\",\n\t\t\tdate: new Date(2024, 2, 18),\n\t\t\turl: \"#\",\n\t\t},\n\t],\n\tlastWeekChats: [\n\t\t{\n\t\t\ttitle: \"API Design Discussion\",\n\t\t\tdate: new Date(2024, 2, 15),\n\t\t\turl: \"#\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Database Schema Planning\",\n\t\t\tdate: new Date(2024, 2, 14),\n\t\t\turl: \"#\",\n\t\t},\n\t],\n\tlastMonthChats: [\n\t\t{\n\t\t\ttitle: \"Architecture Overview\",\n\t\t\tdate: new Date(2024, 1, 28),\n\t\t\turl: \"#\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Performance Optimization\",\n\t\t\tdate: new Date(2024, 1, 25),\n\t\t\turl: \"#\",\n\t\t},\n\t],\n\tpreviousChats: [\n\t\t{\n\t\t\ttitle: \"Initial Project Setup\",\n\t\t\tdate: new Date(2023, 11, 15),\n\t\t\turl: \"#\",\n\t\t},\n\t\t{\n\t\t\ttitle: \"Requirements Analysis\",\n\t\t\tdate: new Date(2023, 11, 10),\n\t\t\turl: \"#\",\n\t\t},\n\t],\n};\n\nexport function SidebarApp({ ...props }: ComponentProps<typeof Sidebar>) {\n\treturn (\n\t\t<Sidebar className=\"border-r-0\" {...props}>\n\t\t\t<SidebarHeader>\n\t\t\t\t<div className=\"flex items-center justify-between p-2\">\n\t\t\t\t\t<div className=\"flex items-center gap-3\">\n\t\t\t\t\t\t<div className=\"flex h-8 w-8 items-center justify-center rounded-lg bg-primary\">\n\t\t\t\t\t\t\t<MessageCircle className=\"h-5 w-5 text-primary-foreground\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<span className=\"text-lg font-semibold\">simple-ai</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* New Chat Button */}\n\t\t\t\t\t<TooltipProvider>\n\t\t\t\t\t\t<Tooltip>\n\t\t\t\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t\t\t\t<Button size=\"icon\" variant=\"ghost\">\n\t\t\t\t\t\t\t\t\t<SquarePen className=\"h-5 w-5\" />\n\t\t\t\t\t\t\t\t\t<span className=\"sr-only\">New Chat</span>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t\t<TooltipContent>\n\t\t\t\t\t\t\t\t<p>New Chat</p>\n\t\t\t\t\t\t\t</TooltipContent>\n\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t</TooltipProvider>\n\t\t\t\t</div>\n\t\t\t</SidebarHeader>\n\t\t\t<SidebarContent>\n\t\t\t\t<div className=\"flex flex-col gap-4\">\n\t\t\t\t\t{/* Recent Chats */}\n\t\t\t\t\t<SidebarGroup>\n\t\t\t\t\t\t<SidebarGroupLabel>Recent</SidebarGroupLabel>\n\t\t\t\t\t\t<SidebarMenu>\n\t\t\t\t\t\t\t{data.recentChats.map((chat) => (\n\t\t\t\t\t\t\t\t<SidebarMenuItem key={chat.title}>\n\t\t\t\t\t\t\t\t\t<SidebarMenuButton className=\"w-full justify-start\">\n\t\t\t\t\t\t\t\t\t\t<MessageCircle className=\"mr-2 h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t\t{chat.title}\n\t\t\t\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t\t\t\t</SidebarMenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</SidebarMenu>\n\t\t\t\t\t</SidebarGroup>\n\n\t\t\t\t\t{/* Previous 7 Days */}\n\t\t\t\t\t<SidebarGroup>\n\t\t\t\t\t\t<SidebarGroupLabel>Previous 7 Days</SidebarGroupLabel>\n\t\t\t\t\t\t<SidebarMenu>\n\t\t\t\t\t\t\t{data.lastWeekChats.map((chat) => (\n\t\t\t\t\t\t\t\t<SidebarMenuItem key={chat.title}>\n\t\t\t\t\t\t\t\t\t<SidebarMenuButton className=\"w-full justify-start\">\n\t\t\t\t\t\t\t\t\t\t<MessageCircle className=\"mr-2 h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t\t{chat.title}\n\t\t\t\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t\t\t\t</SidebarMenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</SidebarMenu>\n\t\t\t\t\t</SidebarGroup>\n\n\t\t\t\t\t{/* Previous 30 Days */}\n\t\t\t\t\t<SidebarGroup>\n\t\t\t\t\t\t<SidebarGroupLabel>Previous 30 Days</SidebarGroupLabel>\n\t\t\t\t\t\t<SidebarMenu>\n\t\t\t\t\t\t\t{data.lastMonthChats.map((chat) => (\n\t\t\t\t\t\t\t\t<SidebarMenuItem key={chat.title}>\n\t\t\t\t\t\t\t\t\t<SidebarMenuButton className=\"w-full justify-start\">\n\t\t\t\t\t\t\t\t\t\t<MessageCircle className=\"mr-2 h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t\t{chat.title}\n\t\t\t\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t\t\t\t</SidebarMenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</SidebarMenu>\n\t\t\t\t\t</SidebarGroup>\n\n\t\t\t\t\t{/* Previous Years */}\n\t\t\t\t\t<SidebarGroup>\n\t\t\t\t\t\t<SidebarGroupLabel>Previous Years</SidebarGroupLabel>\n\t\t\t\t\t\t<SidebarMenu>\n\t\t\t\t\t\t\t{data.previousChats.map((chat) => (\n\t\t\t\t\t\t\t\t<SidebarMenuItem key={chat.title}>\n\t\t\t\t\t\t\t\t\t<SidebarMenuButton className=\"w-full justify-start\">\n\t\t\t\t\t\t\t\t\t\t<MessageCircle className=\"mr-2 h-4 w-4\" />\n\t\t\t\t\t\t\t\t\t\t{chat.title}\n\t\t\t\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t\t\t\t</SidebarMenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</SidebarMenu>\n\t\t\t\t\t</SidebarGroup>\n\t\t\t\t</div>\n\t\t\t</SidebarContent>\n\t\t\t<SidebarRail />\n\t\t\t<SidebarFooter>\n\t\t\t\t<NavUser user={data.user} />\n\t\t\t</SidebarFooter>\n\t\t</Sidebar>\n\t);\n}\n",
			"type": "registry:component"
		},
		{
			"path": "./src/registry/blocks/chat-01/components/nav-user.tsx",
			"content": "\"use client\";\n\nimport {\n\tBadgeCheck,\n\tBell,\n\tChevronsUpDown,\n\tCreditCard,\n\tLogOut,\n\tSparkles,\n} from \"lucide-react\";\n\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n\tDropdownMenu,\n\tDropdownMenuContent,\n\tDropdownMenuGroup,\n\tDropdownMenuItem,\n\tDropdownMenuLabel,\n\tDropdownMenuSeparator,\n\tDropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n\tSidebarMenu,\n\tSidebarMenuButton,\n\tSidebarMenuItem,\n\tuseSidebar,\n} from \"@/components/ui/sidebar\";\n\nexport function NavUser({\n\tuser,\n}: {\n\tuser: {\n\t\tname: string;\n\t\temail: string;\n\t\tavatar: string;\n\t};\n}) {\n\tconst { isMobile } = useSidebar();\n\n\treturn (\n\t\t<SidebarMenu>\n\t\t\t<SidebarMenuItem>\n\t\t\t\t<DropdownMenu>\n\t\t\t\t\t<DropdownMenuTrigger asChild>\n\t\t\t\t\t\t<SidebarMenuButton\n\t\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\t\tclassName=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Avatar className=\"h-8 w-8 rounded-lg\">\n\t\t\t\t\t\t\t\t<AvatarImage\n\t\t\t\t\t\t\t\t\tsrc={user.avatar}\n\t\t\t\t\t\t\t\t\talt={user.name}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<AvatarFallback className=\"rounded-lg\">\n\t\t\t\t\t\t\t\t\tCN\n\t\t\t\t\t\t\t\t</AvatarFallback>\n\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t\t<div className=\"grid flex-1 text-left text-sm leading-tight\">\n\t\t\t\t\t\t\t\t<span className=\"truncate font-semibold\">\n\t\t\t\t\t\t\t\t\t{user.name}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span className=\"truncate text-xs\">\n\t\t\t\t\t\t\t\t\t{user.email}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<ChevronsUpDown className=\"ml-auto size-4\" />\n\t\t\t\t\t\t</SidebarMenuButton>\n\t\t\t\t\t</DropdownMenuTrigger>\n\t\t\t\t\t<DropdownMenuContent\n\t\t\t\t\t\tclassName=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\"\n\t\t\t\t\t\tside={isMobile ? \"bottom\" : \"right\"}\n\t\t\t\t\t\talign=\"start\"\n\t\t\t\t\t\tsideOffset={4}\n\t\t\t\t\t>\n\t\t\t\t\t\t<DropdownMenuLabel className=\"p-0 font-normal\">\n\t\t\t\t\t\t\t<div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n\t\t\t\t\t\t\t\t<Avatar className=\"h-8 w-8 rounded-lg\">\n\t\t\t\t\t\t\t\t\t<AvatarImage\n\t\t\t\t\t\t\t\t\t\tsrc={user.avatar}\n\t\t\t\t\t\t\t\t\t\talt={user.name}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<AvatarFallback className=\"rounded-lg\">\n\t\t\t\t\t\t\t\t\t\tCN\n\t\t\t\t\t\t\t\t\t</AvatarFallback>\n\t\t\t\t\t\t\t\t</Avatar>\n\t\t\t\t\t\t\t\t<div className=\"grid flex-1 text-left text-sm leading-tight\">\n\t\t\t\t\t\t\t\t\t<span className=\"truncate font-semibold\">\n\t\t\t\t\t\t\t\t\t\t{user.name}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t<span className=\"truncate text-xs\">\n\t\t\t\t\t\t\t\t\t\t{user.email}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</DropdownMenuLabel>\n\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t<DropdownMenuGroup>\n\t\t\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\t\t\t<Sparkles />\n\t\t\t\t\t\t\t\tUpgrade to Pro\n\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t</DropdownMenuGroup>\n\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t<DropdownMenuGroup>\n\t\t\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\t\t\t<BadgeCheck />\n\t\t\t\t\t\t\t\tAccount\n\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\t\t\t<CreditCard />\n\t\t\t\t\t\t\t\tBilling\n\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\t\t\t<Bell />\n\t\t\t\t\t\t\t\tNotifications\n\t\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t\t</DropdownMenuGroup>\n\t\t\t\t\t\t<DropdownMenuSeparator />\n\t\t\t\t\t\t<DropdownMenuItem>\n\t\t\t\t\t\t\t<LogOut />\n\t\t\t\t\t\t\tLog out\n\t\t\t\t\t\t</DropdownMenuItem>\n\t\t\t\t\t</DropdownMenuContent>\n\t\t\t\t</DropdownMenu>\n\t\t\t</SidebarMenuItem>\n\t\t</SidebarMenu>\n\t);\n}\n",
			"type": "registry:component"
		}
	],
	"categories": ["chat"]
}
