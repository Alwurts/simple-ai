{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "chat-message",
	"type": "registry:ui",
	"registryDependencies": [],
	"files": [
		{
			"path": "./src/registry/ui/chat-message.tsx",
			"content": "import { cva, type VariantProps } from \"class-variance-authority\";\nimport { SparklesIcon, UserIcon } from \"lucide-react\";\nimport React, { type ReactNode } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { MarkdownContent } from \"@/registry/ui/markdown-content\";\n\nconst chatMessageVariants = cva(\"flex gap-4 w-full\", {\n\tvariants: {\n\t\tvariant: {\n\t\t\tdefault: \"\",\n\t\t\tbubble: \"\",\n\t\t\tfull: \"p-5\",\n\t\t},\n\t\ttype: {\n\t\t\tincoming: \"justify-start mr-auto\",\n\t\t\toutgoing: \"justify-end ml-auto\",\n\t\t},\n\t},\n\tcompoundVariants: [\n\t\t{\n\t\t\tvariant: \"full\",\n\t\t\ttype: \"outgoing\",\n\t\t\tclassName: \"bg-muted\",\n\t\t},\n\t\t{\n\t\t\tvariant: \"full\",\n\t\t\ttype: \"incoming\",\n\t\t\tclassName: \"bg-background\",\n\t\t},\n\t],\n\tdefaultVariants: {\n\t\tvariant: \"default\",\n\t\ttype: \"incoming\",\n\t},\n});\n\ninterface MessageContextValue extends VariantProps<typeof chatMessageVariants> {\n\tid: string;\n}\n\nconst ChatMessageContext = React.createContext<MessageContextValue | null>(\n\tnull,\n);\n\nconst useChatMessage = () => {\n\tconst context = React.useContext(ChatMessageContext);\n\treturn context;\n};\n\n// Root component\ninterface ChatMessageProps\n\textends React.HTMLAttributes<HTMLDivElement>,\n\t\tVariantProps<typeof chatMessageVariants> {\n\tchildren?: React.ReactNode;\n\tid: string;\n}\n\nconst ChatMessage = React.forwardRef<HTMLDivElement, ChatMessageProps>(\n\t(\n\t\t{\n\t\t\tclassName,\n\t\t\tvariant = \"default\",\n\t\t\ttype = \"incoming\",\n\t\t\tid,\n\t\t\tchildren,\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\treturn (\n\t\t\t<ChatMessageContext.Provider value={{ variant, type, id }}>\n\t\t\t\t<div\n\t\t\t\t\tref={ref}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\tchatMessageVariants({ variant, type, className }),\n\t\t\t\t\t)}\n\t\t\t\t\t{...props}\n\t\t\t\t>\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t</ChatMessageContext.Provider>\n\t\t);\n\t},\n);\nChatMessage.displayName = \"ChatMessage\";\n\n// Avatar component\n\nconst chatMessageAvatarVariants = cva(\n\t\"w-8 h-8 flex items-center rounded-full justify-center ring-1 shrink-0 bg-transparent overflow-hidden\",\n\t{\n\t\tvariants: {\n\t\t\ttype: {\n\t\t\t\tincoming: \"ring-border\",\n\t\t\t\toutgoing: \"ring-muted-foreground/30\",\n\t\t\t},\n\t\t},\n\t\tdefaultVariants: {\n\t\t\ttype: \"incoming\",\n\t\t},\n\t},\n);\n\ninterface ChatMessageAvatarProps extends React.HTMLAttributes<HTMLDivElement> {\n\timageSrc?: string;\n\ticon?: ReactNode;\n}\n\nconst ChatMessageAvatar = React.forwardRef<\n\tHTMLDivElement,\n\tChatMessageAvatarProps\n>(({ className, icon: iconProps, imageSrc, ...props }, ref) => {\n\tconst context = useChatMessage();\n\tconst type = context?.type ?? \"incoming\";\n\tconst icon =\n\t\ticonProps ?? (type === \"incoming\" ? <SparklesIcon /> : <UserIcon />);\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\tclassName={cn(chatMessageAvatarVariants({ type, className }))}\n\t\t\t{...props}\n\t\t>\n\t\t\t{imageSrc ? (\n\t\t\t\t// biome-ignore lint/performance/noImgElement: Required for image\n\t\t\t\t<img\n\t\t\t\t\tsrc={imageSrc}\n\t\t\t\t\talt=\"Avatar\"\n\t\t\t\t\tclassName=\"h-full w-full object-cover\"\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<div className=\"translate-y-px [&_svg]:size-4 [&_svg]:shrink-0\">\n\t\t\t\t\t{icon}\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n});\nChatMessageAvatar.displayName = \"ChatMessageAvatar\";\n\n// Content component\n\nconst chatMessageContentVariants = cva(\"flex flex-col gap-2\", {\n\tvariants: {\n\t\tvariant: {\n\t\t\tdefault: \"\",\n\t\t\tbubble: \"rounded-xl px-3 py-2\",\n\t\t\tfull: \"\",\n\t\t},\n\t\ttype: {\n\t\t\tincoming: \"\",\n\t\t\toutgoing: \"\",\n\t\t},\n\t},\n\tcompoundVariants: [\n\t\t{\n\t\t\tvariant: \"bubble\",\n\t\t\ttype: \"incoming\",\n\t\t\tclassName: \"bg-secondary text-secondary-foreground\",\n\t\t},\n\t\t{\n\t\t\tvariant: \"bubble\",\n\t\t\ttype: \"outgoing\",\n\t\t\tclassName: \"bg-primary text-primary-foreground\",\n\t\t},\n\t],\n\tdefaultVariants: {\n\t\tvariant: \"default\",\n\t\ttype: \"incoming\",\n\t},\n});\n\ninterface ChatMessageContentProps extends React.HTMLAttributes<HTMLDivElement> {\n\tid?: string;\n\tcontent: string;\n}\n\nconst ChatMessageContent = React.forwardRef<\n\tHTMLDivElement,\n\tChatMessageContentProps\n>(({ className, content, id: idProp, children, ...props }, ref) => {\n\tconst context = useChatMessage();\n\n\tconst variant = context?.variant ?? \"default\";\n\tconst type = context?.type ?? \"incoming\";\n\tconst id = idProp ?? context?.id ?? \"\";\n\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\tclassName={cn(\n\t\t\t\tchatMessageContentVariants({ variant, type, className }),\n\t\t\t)}\n\t\t\t{...props}\n\t\t>\n\t\t\t{content.length > 0 && (\n\t\t\t\t<MarkdownContent id={id} content={content} />\n\t\t\t)}\n\t\t\t{children}\n\t\t</div>\n\t);\n});\nChatMessageContent.displayName = \"ChatMessageContent\";\n\nexport { ChatMessage, ChatMessageAvatar, ChatMessageContent };\n",
			"type": "registry:ui"
		}
	]
}
