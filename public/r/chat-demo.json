{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "chat-demo",
	"type": "registry:example",
	"files": [
		{
			"path": "./src/registry/examples/chat-demo.tsx",
			"content": "\"use client\";\n\nimport { type UIMessage, useChat } from \"@ai-sdk/react\";\nimport { DefaultChatTransport } from \"ai\";\nimport { useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { useTrackEvent } from \"@/lib/events\";\nimport {\n\tChatInput,\n\tChatInputSubmit,\n\tChatInputTextArea,\n} from \"@/registry/ui/chat-input\";\nimport {\n\tChatMessage,\n\tChatMessageAvatar,\n\tChatMessageContent,\n} from \"@/registry/ui/chat-message\";\nimport {\n\tMessageArea,\n\tMessageAreaContent,\n\tMessageAreaScrollButton,\n} from \"@/registry/ui/message-area\";\n\nconst INITIAL_MESSAGES: UIMessage[] = [\n\t{\n\t\tid: \"1\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"ğŸ‘‹ Welcome to Simple-AI.dev! We're your go-to library for copy-paste AI components and React Flow workflows.\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t},\n\t{\n\t\tid: \"2\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"This chat interface you're looking at? It's just one of our many copy-paste friendly components. Built with the Vercel AI SDK, it's ready for your AI applications with features like streaming responses and seamless LLM integration.\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t},\n\t{\n\t\tid: \"3\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Want to explore our other components, app blocks, or AI workflow tools? Feel free to ask!\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t},\n];\n\nexport default function ChatDemo() {\n\tconst [input, setInput] = useState(\"\");\n\n\tconst { messages, sendMessage, status, stop } = useChat({\n\t\ttransport: new DefaultChatTransport({\n\t\t\tapi: \"/api/ai/chat\",\n\t\t}),\n\t\tmessages: INITIAL_MESSAGES,\n\t\tonFinish: ({ message }) => {\n\t\t\t//console.log(\"onFinish\", message, completion);\n\t\t\ttrack({\n\t\t\t\tname: \"example_used\",\n\t\t\t\tproperties: {\n\t\t\t\t\tused_example: \"chat-demo\",\n\t\t\t\t\tused_example_ai_completion: JSON.stringify(\n\t\t\t\t\t\tmessage.parts,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t2,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t});\n\n\tconst isLoading = status === \"streaming\" || status === \"submitted\";\n\n\tconst track = useTrackEvent();\n\n\tconst handleSubmitMessage = () => {\n\t\tif (isLoading) {\n\t\t\treturn;\n\t\t}\n\t\tsendMessage({ role: \"user\", parts: [{ type: \"text\", text: input }] });\n\t\tsetInput(\"\");\n\t};\n\n\treturn (\n\t\t<div className=\"w-full\">\n\t\t\t<Card className=\"w-full max-w-xl mx-auto flex flex-col flex-1 h-[500px]\">\n\t\t\t\t<div className=\"flex-1 flex flex-col min-h-0\">\n\t\t\t\t\t<MessageArea>\n\t\t\t\t\t\t<MessageAreaContent>\n\t\t\t\t\t\t\t{messages.map((message) => {\n\t\t\t\t\t\t\t\tif (message.role !== \"user\") {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<ChatMessage\n\t\t\t\t\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\t\t\t\t\tid={message.id}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<ChatMessageAvatar />\n\t\t\t\t\t\t\t\t\t\t\t{message.parts\n\t\t\t\t\t\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t\t(part) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpart.type === \"text\",\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t.map((part) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ChatMessageContent\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={part.type}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontent={part.text}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</ChatMessage>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<ChatMessage\n\t\t\t\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\t\t\t\tid={message.id}\n\t\t\t\t\t\t\t\t\t\tvariant=\"bubble\"\n\t\t\t\t\t\t\t\t\t\ttype=\"outgoing\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{message.parts\n\t\t\t\t\t\t\t\t\t\t\t.filter(\n\t\t\t\t\t\t\t\t\t\t\t\t(part) => part.type === \"text\",\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t.map((part) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<ChatMessageContent\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={part.type}\n\t\t\t\t\t\t\t\t\t\t\t\t\tcontent={part.text}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ChatMessage>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</MessageAreaContent>\n\t\t\t\t\t\t<MessageAreaScrollButton />\n\t\t\t\t\t</MessageArea>\n\t\t\t\t\t<div className=\"border-t p-4\">\n\t\t\t\t\t\t<ChatInput\n\t\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\t\tonChange={(e) => setInput(e.target.value)}\n\t\t\t\t\t\t\tonSubmit={handleSubmitMessage}\n\t\t\t\t\t\t\tloading={isLoading}\n\t\t\t\t\t\t\tonStop={stop}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ChatInputTextArea placeholder=\"Type a message...\" />\n\t\t\t\t\t\t\t<ChatInputSubmit />\n\t\t\t\t\t\t</ChatInput>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n",
			"type": "registry:example"
		}
	]
}
