{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "chat-03",
	"type": "registry:block",
	"description": "A chat in a popover.",
	"dependencies": ["ai", "@ai-sdk/openai"],
	"registryDependencies": [
		"popover",
		"button",
		"undefined/r/chat-input.json",
		"undefined/r/chat-message-area.json",
		"undefined/r/chat-message.json"
	],
	"files": [
		{
			"path": "./src/registry/blocks/chat-03/page.tsx",
			"content": "\"use client\";\n\nimport { X } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Chat } from \"@/registry/blocks/chat-03/components/chat\";\n\nexport default function Page() {\n\tconst [open, setOpen] = useState(true);\n\n\treturn (\n\t\t<div className=\"h-screen flex items-center justify-center\">\n\t\t\t<Button size=\"lg\" onClick={() => setOpen(true)}>\n\t\t\t\tOpen Chat\n\t\t\t</Button>\n\t\t\t<div className=\"fixed bottom-4 right-4 z-50 flex flex-col items-end gap-4\">\n\t\t\t\t{open && (\n\t\t\t\t\t<div className=\"w-[400px] h-[600px] bg-background border rounded-lg shadow-lg flex flex-col overflow-hidden\">\n\t\t\t\t\t\t<div className=\"flex items-center justify-between p-4 border-b\">\n\t\t\t\t\t\t\t<h4 className=\"font-semibold\">Chat</h4>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tsize=\"icon\"\n\t\t\t\t\t\t\t\tonClick={() => setOpen(false)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<span className=\"sr-only\">Close chat</span>\n\t\t\t\t\t\t\t\t<X />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<Chat />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
			"type": "registry:page",
			"target": "app/chat/page.tsx"
		},
		{
			"path": "./src/registry/blocks/chat-03/route.ts",
			"content": "import { openai } from \"@ai-sdk/openai\";\nimport { convertToModelMessages, streamText } from \"ai\";\n\nexport async function POST(req: Request) {\n\tconst { messages } = await req.json();\n\n\tconst result = streamText({\n\t\tmodel: openai(\"gpt-4o-mini\"),\n\t\tsystem: \"You are a helpful assistant\",\n\t\tmessages: convertToModelMessages(messages),\n\t});\n\n\treturn result.toUIMessageStreamResponse();\n}\n",
			"type": "registry:page",
			"target": "app/api/ai/chat/route.ts"
		},
		{
			"path": "./src/registry/blocks/chat-03/components/chat.tsx",
			"content": "\"use client\";\n\nimport { useChat } from \"@ai-sdk/react\";\nimport { DefaultChatTransport, type UIMessage } from \"ai\";\nimport { useState } from \"react\";\nimport { useTrackEvent } from \"@/lib/events\";\nimport {\n\tChatInput,\n\tChatInputSubmit,\n\tChatInputTextArea,\n} from \"@/registry/ui/chat-input\";\nimport {\n\tChatMessage,\n\tChatMessageAvatar,\n\tChatMessageContent,\n} from \"@/registry/ui/chat-message\";\nimport { ChatMessageArea } from \"@/registry/ui/message-area\";\n\nconst INITIAL_MESSAGES: UIMessage[] = [\n\t{\n\t\tid: \"1\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Hello! Welcome to our customer support. How can I assist you today?\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t},\n\t{\n\t\tid: \"2\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"Hi, I received my order yesterday but the size of the shirt is too small. I'd like to exchange it for a larger size.\",\n\t\t\t},\n\t\t],\n\t\trole: \"user\",\n\t},\n\t{\n\t\tid: \"3\",\n\t\tparts: [\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\ttext: \"I'm sorry to hear that the size didn't work out. I'll be happy to help you with the exchange. Could you please provide your order number? You can find it in your confirmation email.\",\n\t\t\t},\n\t\t],\n\t\trole: \"assistant\",\n\t},\n];\n\nexport function Chat() {\n\tconst { messages, sendMessage, status, stop } = useChat({\n\t\ttransport: new DefaultChatTransport({\n\t\t\tapi: \"/api/ai/chat\",\n\t\t}),\n\t\tmessages: INITIAL_MESSAGES,\n\t\tonFinish: ({ message }) => {\n\t\t\t//console.log(\"onFinish\", message, completion);\n\t\t\ttrack({\n\t\t\t\tname: \"block_used\",\n\t\t\t\tproperties: {\n\t\t\t\t\tused_block: \"chat-03\",\n\t\t\t\t\tused_block_ai_completion: JSON.stringify(\n\t\t\t\t\t\tmessage.parts,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t2,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t});\n\tconst track = useTrackEvent();\n\tconst [input, setInput] = useState(\"\");\n\tconst isLoading = status === \"streaming\" || status === \"submitted\";\n\n\tconst handleSubmitMessage = () => {\n\t\tif (isLoading) {\n\t\t\treturn;\n\t\t}\n\t\tsendMessage({ role: \"user\", parts: [{ type: \"text\", text: input }] });\n\t\tsetInput(\"\");\n\t};\n\n\treturn (\n\t\t<div className=\"flex flex-col h-full overflow-y-auto\">\n\t\t\t<ChatMessageArea className=\"px-4 py-4 space-y-4\">\n\t\t\t\t{messages.map((message) => {\n\t\t\t\t\tif (message.role !== \"user\") {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<ChatMessage\n\t\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\t\tid={message.id}\n\t\t\t\t\t\t\t\tvariant=\"bubble\"\n\t\t\t\t\t\t\t\ttype=\"incoming\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ChatMessageAvatar imageSrc=\"/avatar-1.png\" />\n\t\t\t\t\t\t\t\t{message.parts\n\t\t\t\t\t\t\t\t\t.filter((part) => part.type === \"text\")\n\t\t\t\t\t\t\t\t\t.map((part) => (\n\t\t\t\t\t\t\t\t\t\t<ChatMessageContent\n\t\t\t\t\t\t\t\t\t\t\tkey={part.type}\n\t\t\t\t\t\t\t\t\t\t\tcontent={part.text}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</ChatMessage>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ChatMessage\n\t\t\t\t\t\t\tkey={message.id}\n\t\t\t\t\t\t\tid={message.id}\n\t\t\t\t\t\t\tvariant=\"bubble\"\n\t\t\t\t\t\t\ttype=\"outgoing\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{message.parts\n\t\t\t\t\t\t\t\t.filter((part) => part.type === \"text\")\n\t\t\t\t\t\t\t\t.map((part) => (\n\t\t\t\t\t\t\t\t\t<ChatMessageContent\n\t\t\t\t\t\t\t\t\t\tkey={part.type}\n\t\t\t\t\t\t\t\t\t\tcontent={part.text}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t<ChatMessageAvatar imageSrc=\"/avatar-1.png\" />\n\t\t\t\t\t\t</ChatMessage>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ChatMessageArea>\n\t\t\t<div className=\"px-2 py-2 border-t\">\n\t\t\t\t<ChatInput\n\t\t\t\t\tvalue={input}\n\t\t\t\t\tonChange={(e) => setInput(e.target.value)}\n\t\t\t\t\tonSubmit={handleSubmitMessage}\n\t\t\t\t\tloading={isLoading}\n\t\t\t\t\tonStop={stop}\n\t\t\t\t>\n\t\t\t\t\t<ChatInputTextArea placeholder=\"Type a message...\" />\n\t\t\t\t\t<ChatInputSubmit />\n\t\t\t\t</ChatInput>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
			"type": "registry:component"
		}
	],
	"categories": ["chat"]
}
