{
  "name": "flow-01",
  "type": "registry:block",
  "description": "A flow chart builder.",
  "dependencies": [
    "@xyflow/react",
    "zustand"
  ],
  "registryDependencies": [
    "button",
    "card",
    "dialog",
    "input",
    "textarea"
  ],
  "files": [
    {
      "path": "blocks/flow-01/page.tsx",
      "content": "\"use client\";\n\nimport {\n\tControls,\n\ttype EdgeTypes,\n\tMiniMap,\n\ttype NodeTypes,\n\tReactFlowProvider,\n} from \"@xyflow/react\";\nimport { Background, Panel, ReactFlow, useReactFlow } from \"@xyflow/react\";\nimport type React from \"react\";\nimport { shallow } from \"zustand/shallow\";\nimport \"@xyflow/react/dist/style.css\";\n/* import { DevTools } from \"@/components/flow/devtools\"; */\nimport { Button } from \"@/components/ui/button\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"@/components/ui/popover\";\nimport type { FlowNode } from \"@/hooks/flow/use-workflow\";\nimport { useStore } from \"@/hooks/flow/use-workflow\";\nimport { Connection } from \"@/components/ui/flow/connection\";\nimport { GenerateTextNode } from \"@/components/ui/flow/generate-text-node\";\nimport { NodesPanel } from \"@/components/nodes-panel\";\nimport { PromptCrafter } from \"@/components/ui/flow/prompt-crafter-node\";\nimport { TextInput } from \"@/components/ui/flow/text-input-node\";\nimport { VisualizeText } from \"@/components/ui/flow/visualize-text-node\";\nimport { AlertCircle, Copy } from \"lucide-react\";\nimport type { WorkflowError } from \"@/lib/flow/workflow\";\n\nconst nodeTypes: NodeTypes = {\n\t\"generate-text\": GenerateTextNode,\n\t\"visualize-text\": VisualizeText,\n\t\"text-input\": TextInput,\n\t\"prompt-crafter\": PromptCrafter,\n};\n\nconst edgeTypes: EdgeTypes = {\n\tconnection: Connection,\n};\n\nfunction ErrorIndicator({\n\terrors,\n}: { errors: WorkflowError[] }): React.ReactElement | null {\n\tif (errors.length === 0) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<Popover>\n\t\t\t<PopoverTrigger asChild>\n\t\t\t\t<Button variant=\"ghost\" size=\"icon\" className=\"text-red-500\">\n\t\t\t\t\t<AlertCircle className=\"h-5 w-5\" />\n\t\t\t\t</Button>\n\t\t\t</PopoverTrigger>\n\t\t\t<PopoverContent align=\"center\" className=\"w-80 mt-4 mr-4\">\n\t\t\t\t<div className=\"space-y-2\">\n\t\t\t\t\t<h4 className=\"font-medium\">Workflow Errors</h4>\n\t\t\t\t\t<div className=\"space-y-1\">\n\t\t\t\t\t\t{errors.map((error) => (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tkey={`${error.type}-${error.message}`}\n\t\t\t\t\t\t\t\tclassName=\"text-sm text-red-500\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{error.message}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</PopoverContent>\n\t\t</Popover>\n\t);\n}\n\nfunction Flow() {\n\tconst store = useStore(\n\t\t(store) => ({\n\t\t\tnodes: store.nodes,\n\t\t\tedges: store.edges,\n\t\t\tonNodesChange: store.onNodesChange,\n\t\t\tonEdgesChange: store.onEdgesChange,\n\t\t\tonConnect: store.onConnect,\n\t\t\tstartExecution: store.startExecution,\n\t\t\tcreateNode: store.createNode,\n\t\t\tworkflowExecutionState: store.workflowExecutionState,\n\t\t}),\n\t\tshallow,\n\t);\n\n\tconst { screenToFlowPosition } = useReactFlow();\n\n\tconst onDragOver = (event: React.DragEvent) => {\n\t\tevent.preventDefault();\n\t\tevent.dataTransfer.dropEffect = \"move\";\n\t};\n\n\tconst onDrop = (event: React.DragEvent) => {\n\t\tevent.preventDefault();\n\n\t\tconst type = event.dataTransfer.getData(\n\t\t\t\"application/reactflow\",\n\t\t) as FlowNode[\"type\"];\n\n\t\t// Check if the dropped element is valid\n\t\tif (!type) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the position of the drop\n\t\tconst position = screenToFlowPosition({\n\t\t\tx: event.clientX,\n\t\t\ty: event.clientY,\n\t\t});\n\n\t\tstore.createNode(type, position);\n\t};\n\n\tconst handleExport = () => {\n\t\tconst exportData = {\n\t\t\tnodes: store.nodes.map((node) => ({\n\t\t\t\ttype: node.type,\n\t\t\t\tid: node.id,\n\t\t\t\tdata: {\n\t\t\t\t\t...node.data,\n\t\t\t\t\texecutionState: undefined,\n\t\t\t\t},\n\t\t\t\tposition: node.position,\n\t\t\t\twidth: node.width,\n\t\t\t\theight: node.height,\n\t\t\t})),\n\t\t\tedges: store.edges.map((edge) => ({\n\t\t\t\t...edge,\n\t\t\t\tdata: {\n\t\t\t\t\t...edge.data,\n\t\t\t\t\texecutionState: undefined,\n\t\t\t\t},\n\t\t\t})),\n\t\t};\n\t\tnavigator.clipboard.writeText(JSON.stringify(exportData, null, 2));\n\t};\n\n\treturn (\n\t\t<ReactFlow\n\t\t\tnodes={store.nodes}\n\t\t\tedges={store.edges}\n\t\t\tonNodesChange={store.onNodesChange}\n\t\t\tonEdgesChange={store.onEdgesChange}\n\t\t\tonConnect={store.onConnect}\n\t\t\tnodeTypes={nodeTypes}\n\t\t\tedgeTypes={edgeTypes}\n\t\t\tonDragOver={onDragOver}\n\t\t\tonDrop={onDrop}\n\t\t\tfitView\n\t\t>\n\t\t\t<Background />\n\t\t\t{/* <DevTools /> */}\n\t\t\t<Controls />\n\t\t\t<MiniMap />\n\t\t\t<NodesPanel />\n\t\t\t<Panel position=\"top-right\" className=\"flex gap-2 items-center\">\n\t\t\t\t<ErrorIndicator errors={store.workflowExecutionState.errors} />\n\t\t\t\t<Button\n\t\t\t\t\tonClick={handleExport}\n\t\t\t\t\tvariant=\"outline\"\n\t\t\t\t\tclassName=\"flex gap-2 items-center\"\n\t\t\t\t>\n\t\t\t\t\t<Copy className=\"h-4 w-4\" />\n\t\t\t\t\tExport Flow\n\t\t\t\t</Button>\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tstore.startExecution();\n\t\t\t\t\t}}\n\t\t\t\t\tdisabled={\n\t\t\t\t\t\tstore.workflowExecutionState.errors.length > 0 ||\n\t\t\t\t\t\tstore.workflowExecutionState.isRunning\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t{store.workflowExecutionState.isRunning ? \"Running...\" : \"Run Flow\"}\n\t\t\t\t</Button>\n\t\t\t</Panel>\n\t\t</ReactFlow>\n\t);\n}\n\nexport default function Flow01Page() {\n\treturn (\n\t\t<div className=\"w-screen h-screen\">\n\t\t\t<ReactFlowProvider>\n\t\t\t\t<Flow />\n\t\t\t</ReactFlowProvider>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:page",
      "target": "app/flow/page.tsx"
    }
  ]
}