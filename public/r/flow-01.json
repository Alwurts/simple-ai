{
  "name": "flow-01",
  "type": "registry:block",
  "description": "A flow chart builder.",
  "dependencies": [
    "@xyflow/react",
    "zustand"
  ],
  "registryDependencies": [
    "button",
    "card",
    "dialog",
    "input",
    "textarea"
  ],
  "files": [
    {
      "path": "blocks/flow-01/page.tsx",
      "content": "\"use client\";\n\nimport { type NodeTypes, ReactFlowProvider } from \"@xyflow/react\";\nimport { Background, Panel, ReactFlow, useReactFlow } from \"@xyflow/react\";\nimport type React from \"react\";\nimport { shallow } from \"zustand/shallow\";\nimport \"@xyflow/react/dist/style.css\";\nimport { DevTools } from \"@/components/flow/devtools\";\nimport { Button } from \"@/components/ui/button\";\nimport { GenerateTextNode } from \"@/components/flow/generate-text-node\";\nimport { NodesPanel } from \"@/components/flow/nodes-panel\";\nimport { PromptCrafterNode } from \"@/components/flow/prompt-crafter-node\";\nimport { TextInputNode } from \"@/components/flow/text-input-node\";\nimport { VisualizeTextNode } from \"@/components/flow/visualize-text-node\";\nimport { useStore } from \"@/registry/blocks/flow-01/hooks/store\";\nimport type { AppNode } from \"@/registry/blocks/flow-01/hooks/store\";\nimport { nanoid } from \"nanoid\";\n\nconst nodeTypes: NodeTypes = {\n\t\"generate-text\": GenerateTextNode,\n\t\"visualize-text\": VisualizeTextNode,\n\t\"text-input\": TextInputNode,\n\t\"prompt-crafter\": PromptCrafterNode,\n};\n\nfunction Flow() {\n\tconst store = useStore(\n\t\t(store) => ({\n\t\t\tnodes: store.nodes,\n\t\t\tedges: store.edges,\n\t\t\tonNodesChange: store.onNodesChange,\n\t\t\tonEdgesChange: store.onEdgesChange,\n\t\t\tonConnect: store.onConnect,\n\t\t\truntime: store.runtime,\n\t\t\tstartExecution: store.startExecution,\n\t\t}),\n\t\tshallow,\n\t);\n\n\tconst { screenToFlowPosition } = useReactFlow();\n\n\tconst onDragOver = (event: React.DragEvent) => {\n\t\tevent.preventDefault();\n\t\tevent.dataTransfer.dropEffect = \"move\";\n\t};\n\n\tconst onDrop = (event: React.DragEvent) => {\n\t\tevent.preventDefault();\n\n\t\tconst type = event.dataTransfer.getData(\"application/reactflow\");\n\n\t\t// Check if the dropped element is valid\n\t\tif (!type) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the position of the drop\n\t\tconst position = screenToFlowPosition({\n\t\t\tx: event.clientX,\n\t\t\ty: event.clientY,\n\t\t});\n\n\t\tlet newNode: AppNode;\n\n\t\tswitch (type) {\n\t\t\tcase \"generate-text\":\n\t\t\t\tnewNode = {\n\t\t\t\t\tid: nanoid(),\n\t\t\t\t\ttype,\n\t\t\t\t\tposition,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tconfig: { model: \"gpt-4o\" },\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase \"prompt-crafter\":\n\t\t\t\tnewNode = {\n\t\t\t\t\tid: nanoid(),\n\t\t\t\t\ttype,\n\t\t\t\t\tposition,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttext: \"\",\n\t\t\t\t\t\tinputs: [],\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase \"visualize-text\":\n\t\t\t\tnewNode = {\n\t\t\t\t\tid: nanoid(),\n\t\t\t\t\ttype,\n\t\t\t\t\tposition,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttext: \"\",\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase \"text-input\":\n\t\t\t\tnewNode = {\n\t\t\t\t\tid: nanoid(),\n\t\t\t\t\ttype,\n\t\t\t\t\tposition,\n\t\t\t\t\tdata: {\n\t\t\t\t\t\ttext: \"\",\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\n\t\tstore.onNodesChange([\n\t\t\t{\n\t\t\t\ttype: \"add\",\n\t\t\t\titem: newNode,\n\t\t\t},\n\t\t]);\n\t};\n\n\treturn (\n\t\t<ReactFlow\n\t\t\tnodes={store.nodes}\n\t\t\tedges={store.edges}\n\t\t\tonNodesChange={store.onNodesChange}\n\t\t\tonEdgesChange={store.onEdgesChange}\n\t\t\tonConnect={store.onConnect}\n\t\t\tnodeTypes={nodeTypes}\n\t\t\tonDragOver={onDragOver}\n\t\t\tonDrop={onDrop}\n\t\t\tfitView\n\t\t>\n\t\t\t<Background />\n\t\t\t<DevTools />\n\t\t\t<NodesPanel />\n\t\t\t<Panel position=\"top-right\" className=\"flex gap-2 items-center\">\n\t\t\t\t{store.runtime.currentNodeId && (\n\t\t\t\t\t<div className=\"text-sm text-muted-foreground\">\n\t\t\t\t\t\tProcessing node: {store.runtime.currentNodeId}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<Button\n\t\t\t\t\tonClick={() => store.startExecution()}\n\t\t\t\t\tdisabled={store.runtime.isRunning}\n\t\t\t\t>\n\t\t\t\t\t{store.runtime.isRunning ? \"Running...\" : \"Run Flow\"}\n\t\t\t\t</Button>\n\t\t\t</Panel>\n\t\t</ReactFlow>\n\t);\n}\n\nexport default function Flow01Page() {\n\treturn (\n\t\t<div className=\"w-screen h-screen\">\n\t\t\t<ReactFlowProvider>\n\t\t\t\t<Flow />\n\t\t\t</ReactFlowProvider>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:page",
      "target": "app/flow/page.tsx"
    }
  ]
}